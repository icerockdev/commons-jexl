/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package org.apache.commons.jexl3.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int ELSE = 10;
  /** RegularExpression Id. */
  int FOR = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int NEW = 13;
  /** RegularExpression Id. */
  int VAR = 14;
  /** RegularExpression Id. */
  int EMPTY = 15;
  /** RegularExpression Id. */
  int SIZE = 16;
  /** RegularExpression Id. */
  int NULL = 17;
  /** RegularExpression Id. */
  int TRUE = 18;
  /** RegularExpression Id. */
  int FALSE = 19;
  /** RegularExpression Id. */
  int RETURN = 20;
  /** RegularExpression Id. */
  int FUNCTION = 21;
  /** RegularExpression Id. */
  int LAMBDA = 22;
  /** RegularExpression Id. */
  int BREAK = 23;
  /** RegularExpression Id. */
  int CONTINUE = 24;
  /** RegularExpression Id. */
  int PRAGMA = 25;
  /** RegularExpression Id. */
  int LPAREN = 26;
  /** RegularExpression Id. */
  int RPAREN = 27;
  /** RegularExpression Id. */
  int LCURLY = 28;
  /** RegularExpression Id. */
  int RCURLY = 29;
  /** RegularExpression Id. */
  int LBRACKET = 30;
  /** RegularExpression Id. */
  int RBRACKET = 31;
  /** RegularExpression Id. */
  int SEMICOL = 32;
  /** RegularExpression Id. */
  int COLON = 33;
  /** RegularExpression Id. */
  int COMMA = 34;
  /** RegularExpression Id. */
  int DOT = 35;
  /** RegularExpression Id. */
  int ELIPSIS = 36;
  /** RegularExpression Id. */
  int QMARK = 37;
  /** RegularExpression Id. */
  int ELVIS = 38;
  /** RegularExpression Id. */
  int AND = 39;
  /** RegularExpression Id. */
  int OR = 40;
  /** RegularExpression Id. */
  int eq = 41;
  /** RegularExpression Id. */
  int ne = 42;
  /** RegularExpression Id. */
  int req = 43;
  /** RegularExpression Id. */
  int rne = 44;
  /** RegularExpression Id. */
  int seq = 45;
  /** RegularExpression Id. */
  int eeq = 46;
  /** RegularExpression Id. */
  int sne = 47;
  /** RegularExpression Id. */
  int ene = 48;
  /** RegularExpression Id. */
  int gt = 49;
  /** RegularExpression Id. */
  int ge = 50;
  /** RegularExpression Id. */
  int lt = 51;
  /** RegularExpression Id. */
  int le = 52;
  /** RegularExpression Id. */
  int plus_assign = 53;
  /** RegularExpression Id. */
  int minus_assign = 54;
  /** RegularExpression Id. */
  int mult_assign = 55;
  /** RegularExpression Id. */
  int div_assign = 56;
  /** RegularExpression Id. */
  int mod_assign = 57;
  /** RegularExpression Id. */
  int and_assign = 58;
  /** RegularExpression Id. */
  int or_assign = 59;
  /** RegularExpression Id. */
  int xor_assign = 60;
  /** RegularExpression Id. */
  int assign = 61;
  /** RegularExpression Id. */
  int plus = 62;
  /** RegularExpression Id. */
  int minus = 63;
  /** RegularExpression Id. */
  int mult = 64;
  /** RegularExpression Id. */
  int div = 65;
  /** RegularExpression Id. */
  int mod = 66;
  /** RegularExpression Id. */
  int not = 67;
  /** RegularExpression Id. */
  int and = 68;
  /** RegularExpression Id. */
  int or = 69;
  /** RegularExpression Id. */
  int xor = 70;
  /** RegularExpression Id. */
  int tilda = 71;
  /** RegularExpression Id. */
  int range = 72;
  /** RegularExpression Id. */
  int NAN_LITERAL = 73;
  /** RegularExpression Id. */
  int ANNOTATION = 74;
  /** RegularExpression Id. */
  int DOT_IDENTIFIER = 75;
  /** RegularExpression Id. */
  int IDENTIFIER = 76;
  /** RegularExpression Id. */
  int LETTER = 77;
  /** RegularExpression Id. */
  int DIGIT = 78;
  /** RegularExpression Id. */
  int REGISTER = 79;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 80;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 81;
  /** RegularExpression Id. */
  int STRING_LITERAL = 82;
  /** RegularExpression Id. */
  int JXLT_LITERAL = 83;

  /** Lexical state. */
  int REGISTERS = 0;
  /** Lexical state. */
  int DOT_ID = 1;
  /** Lexical state. */
  int DEFAULT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<token of kind 2>",
    "<token of kind 3>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"while\"",
    "\"new\"",
    "\"var\"",
    "\"empty\"",
    "\"size\"",
    "\"null\"",
    "\"true\"",
    "\"false\"",
    "\"return\"",
    "\"function\"",
    "\"->\"",
    "\"break\"",
    "\"continue\"",
    "\"#pragma\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\"...\"",
    "\"?\"",
    "\"?:\"",
    "<AND>",
    "<OR>",
    "<eq>",
    "<ne>",
    "\"=~\"",
    "\"!~\"",
    "\"=^\"",
    "\"=$\"",
    "\"!^\"",
    "\"!$\"",
    "<gt>",
    "<ge>",
    "<lt>",
    "<le>",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "<div>",
    "<mod>",
    "<not>",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"~\"",
    "\"..\"",
    "\"NaN\"",
    "<ANNOTATION>",
    "<DOT_IDENTIFIER>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<REGISTER>",
    "<INTEGER_LITERAL>",
    "<FLOAT_LITERAL>",
    "<STRING_LITERAL>",
    "<JXLT_LITERAL>",
  };

}
