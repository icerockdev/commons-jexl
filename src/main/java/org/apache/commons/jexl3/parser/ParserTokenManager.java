/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package org.apache.commons.jexl3.parser;
import java.util.Collections;
import java.util.LinkedList;
import org.apache.commons.jexl3.JexlInfo;
import org.apache.commons.jexl3.JexlException;
import org.apache.commons.jexl3.internal.Scope;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{
    /**
     *   A stack of 1 for keeping state to deal with doted identifiers
     */
    int dotLexState = DEFAULT;

    public void pushDot() {
        dotLexState = curLexState;
        curLexState = DOT_ID;
    }

    public void popDot() {
        if (curLexState == DOT_ID) {
            curLexState = dotLexState;
            dotLexState = defaultLexState;
        }
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 79;
         }
         if ((active0 & 0x1900000000000L) != 0L)
         {
            jjmatchedKind = 67;
            return 13;
         }
         if ((active0 & 0x22000L) != 0L)
         {
            jjmatchedKind = 76;
            return 91;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x10L) != 0L)
            return 0;
         if ((active0 & 0x2000680000000000L) != 0L)
            return 9;
         if ((active0 & 0x1bd5a00L) != 0L || (active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 76;
            return 33;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 70;
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 66;
            return -1;
         }
         if ((active0 & 0x8400L) != 0L)
         {
            jjmatchedKind = 76;
            return 11;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x20L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0x200L) != 0L)
            return 33;
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1bfdc00L) != 0L || (active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 1;
            }
            return 33;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 1;
            }
            return 33;
         }
         return -1;
      case 2:
         if ((active0 & 0x6800L) != 0L || (active1 & 0x200L) != 0L)
            return 33;
         if ((active0 & 0x1bf9400L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 2;
            return 33;
         }
         return -1;
      case 3:
         if ((active0 & 0x1b89000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
            return 33;
         }
         if ((active0 & 0x70400L) != 0L)
            return 33;
         return -1;
      case 4:
         if ((active0 & 0x889000L) != 0L)
            return 33;
         if ((active0 & 0x1300000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
            return 33;
         }
         return -1;
      case 5:
         if ((active0 & 0x100000L) != 0L)
            return 33;
         if ((active0 & 0x1200000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
            return 33;
         }
         return -1;
      case 6:
         if ((active0 & 0x1200000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 6;
            return 33;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_2(0x1900000000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_2(0x2000000L, 0x0L);
      case 37:
         return jjMoveStringLiteralDfa1_2(0x200000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_2(0x400000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 26);
      case 41:
         return jjStopAtPos(0, 27);
      case 42:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_2(0x80000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_2(0x20000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 34);
      case 45:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_2(0x40000000400000L, 0x0L);
      case 46:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_2(0x1000000000L, 0x100L);
      case 47:
         return jjMoveStringLiteralDfa1_2(0x100000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 33);
      case 59:
         return jjStopAtPos(0, 32);
      case 61:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_2(0x680000000000L, 0x0L);
      case 63:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_2(0x4000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x200L);
      case 91:
         return jjStopAtPos(0, 30);
      case 93:
         return jjStopAtPos(0, 31);
      case 94:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_2(0x1000000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_2(0x800000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_2(0x1000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x8400L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x280800L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x200L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x22000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x100000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x10000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x40000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_2(0x4000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 28);
      case 124:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_2(0x800000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 29);
      case 126:
         return jjStopAtPos(0, 71);
      default :
         return jjMoveNfa_2(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 46:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x1000000000L, active1, 0L);
      case 58:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 61:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 94:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x84000L, active1, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x102000L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(1, 9, 33);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x10000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0x8000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000800L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_2(active0, 0x2000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x840000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x220000L, active1, 0L);
      case 126:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 36);
         break;
      case 78:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(2, 73, 33);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x800000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x1000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0xa0000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x1200000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000L, active1, 0L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(2, 11, 33);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(2, 14, 33);
         return jjMoveStringLiteralDfa3_2(active0, 0x2000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x400L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x40000L, active1, 0L);
      case 119:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(2, 13, 33);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_2(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x2800000L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0x200000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(3, 10, 33);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 33);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(3, 18, 33);
         break;
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(3, 17, 33);
         return jjMoveStringLiteralDfa4_2(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0x1008000L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(4, 12, 33);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(4, 19, 33);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_2(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x1000000L);
      case 107:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(4, 23, 33);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_2(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa5_2(active0, 0x200000L);
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(4, 15, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_2(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa6_2(active0, 0x2000000L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(5, 20, 33);
         return jjMoveStringLiteralDfa6_2(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_2(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa7_2(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(7, 24, 33);
         break;
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(7, 21, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_2(6, active0, 0L);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffefffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffffcffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 100;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 70:
                  if (curChar != 35)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 2);
                  break;
               case 91:
               case 33:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(33);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 8);
                  else if (curChar == 47)
                     jjAddStates(9, 10);
                  else if (curChar == 35)
                     jjAddStates(11, 12);
                  else if (curChar == 39)
                     jjCheckNAddStates(13, 15);
                  else if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 36)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(33);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAddTwoStates(35, 36);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAddStates(19, 21);
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 65)
                        kind = 65;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 79:
                  if (curChar == 47)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddStates(22, 24);
                  }
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 11:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(33);
                  break;
               case 0:
                  if (curChar == 38 && kind > 39)
                     kind = 39;
                  break;
               case 9:
                  if (curChar == 61 && kind > 41)
                     kind = 41;
                  break;
               case 10:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if (curChar == 61 && kind > 42)
                     kind = 42;
                  break;
               case 14:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 62 && kind > 49)
                     kind = 49;
                  break;
               case 16:
                  if (curChar == 61 && kind > 50)
                     kind = 50;
                  break;
               case 17:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 60 && kind > 51)
                     kind = 51;
                  break;
               case 19:
                  if (curChar == 61 && kind > 52)
                     kind = 52;
                  break;
               case 20:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 47 && kind > 65)
                     kind = 65;
                  break;
               case 25:
                  if (curChar == 37 && kind > 66)
                     kind = 66;
                  break;
               case 29:
                  if (curChar == 33 && kind > 67)
                     kind = 67;
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if (curChar != 36)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(35, 36);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  break;
               case 38:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 40:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 41:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               case 42:
                  if (curChar == 39)
                     jjCheckNAddStates(13, 15);
                  break;
               case 43:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 45:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 46:
                  if (curChar == 39 && kind > 82)
                     kind = 82;
                  break;
               case 48:
                  jjCheckNAddStates(25, 27);
                  break;
               case 50:
                  if ((0xfffffffffffffffeL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 8);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 46)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddStates(28, 30);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 34);
                  break;
               case 61:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(62, 59);
                  break;
               case 63:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 59);
                  break;
               case 65:
                  if (curChar != 48)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(19, 21);
                  break;
               case 66:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(66, 36);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(68, 36);
                  break;
               case 69:
                  if (curChar == 35)
                     jjAddStates(11, 12);
                  break;
               case 71:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 2);
                  break;
               case 72:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 73:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 74:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 78:
                  if (curChar == 47)
                     jjAddStates(9, 10);
                  break;
               case 80:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 81:
                  if (curChar == 42)
                     jjCheckNAddStates(35, 37);
                  break;
               case 82:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(83, 81);
                  break;
               case 83:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(83, 81);
                  break;
               case 84:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 85:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(22, 24);
                  break;
               case 86:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(22, 24);
                  break;
               case 87:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 88:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 89:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 70:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 91:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(33);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 92;
                  else if (curChar == 101)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 1:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(33);
                  }
                  else if (curChar == 96)
                     jjCheckNAddStates(25, 27);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 108)
                     jjAddStates(38, 39);
                  else if (curChar == 103)
                     jjAddStates(40, 41);
                  else if (curChar == 110)
                     jjAddStates(42, 43);
                  else if (curChar == 64)
                     jjCheckNAdd(31);
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 11:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(33);
                  }
                  if (curChar == 113)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  break;
               case 2:
                  if (curChar == 100 && kind > 39)
                     kind = 39;
                  break;
               case 3:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 124 && kind > 40)
                     kind = 40;
                  break;
               case 6:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 114 && kind > 40)
                     kind = 40;
                  break;
               case 8:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 22:
                  if (curChar == 118 && kind > 65)
                     kind = 65;
                  break;
               case 23:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 100 && kind > 66)
                     kind = 66;
                  break;
               case 27:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if (curChar == 64)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(33);
                  break;
               case 36:
                  if ((0x110000001100L & l) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 38:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 39:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  jjCheckNAddStates(16, 18);
                  break;
               case 43:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 44:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  jjCheckNAddStates(13, 15);
                  break;
               case 47:
                  if (curChar == 96)
                     jjCheckNAddStates(25, 27);
                  break;
               case 48:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 49:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  jjCheckNAddStates(25, 27);
                  break;
               case 51:
                  if (curChar == 96 && kind > 83)
                     kind = 83;
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 59:
                  if ((0x5400000054L & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 62:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 67:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(68, 36);
                  break;
               case 71:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(0, 2);
                  break;
               case 75:
                  if (curChar == 78 && kind > 81)
                     kind = 81;
                  break;
               case 76:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 80:
                  jjCheckNAddTwoStates(80, 81);
                  break;
               case 82:
               case 83:
                  jjCheckNAddTwoStates(83, 81);
                  break;
               case 86:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(22, 24);
                  break;
               case 90:
                  if (curChar == 110)
                     jjAddStates(42, 43);
                  break;
               case 92:
                  if (curChar == 116 && kind > 67)
                     kind = 67;
                  break;
               case 93:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 103)
                     jjAddStates(40, 41);
                  break;
               case 95:
                  if (curChar == 116 && kind > 49)
                     kind = 49;
                  break;
               case 96:
                  if (curChar == 101 && kind > 50)
                     kind = 50;
                  break;
               case 97:
                  if (curChar == 108)
                     jjAddStates(38, 39);
                  break;
               case 98:
                  if (curChar == 116 && kind > 51)
                     kind = 51;
                  break;
               case 99:
                  if (curChar == 101 && kind > 52)
                     kind = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 38:
               case 40:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(16, 18);
                  break;
               case 43:
               case 45:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(13, 15);
                  break;
               case 48:
               case 50:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(25, 27);
                  break;
               case 71:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(0, 2);
                  break;
               case 80:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 82:
               case 83:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(83, 81);
                  break;
               case 86:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(22, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 100 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8400L) != 0L)
         {
            jjmatchedKind = 75;
            return 17;
         }
         if ((active0 & 0x1bd5a00L) != 0L || (active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 75;
            return 38;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 0;
         if ((active0 & 0x2000680000000000L) != 0L)
            return 15;
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 55;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 66;
            return -1;
         }
         if ((active0 & 0x1900000000000L) != 0L)
         {
            jjmatchedKind = 67;
            return 19;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x20L) != 0L)
            return 11;
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x10L) != 0L)
            return 6;
         if ((active0 & 0x22000L) != 0L)
         {
            jjmatchedKind = 75;
            return 67;
         }
         return -1;
      case 1:
         if ((active0 & 0x200L) != 0L)
            return 38;
         if ((active0 & 0x1bfdc00L) != 0L || (active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 75;
               jjmatchedPos = 1;
            }
            return 38;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 1;
            }
            return 38;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x6800L) != 0L || (active1 & 0x200L) != 0L)
            return 38;
         if ((active0 & 0x1bf9400L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
            return 38;
         }
         return -1;
      case 3:
         if ((active0 & 0x1b89000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 3;
            return 38;
         }
         if ((active0 & 0x70400L) != 0L)
            return 38;
         return -1;
      case 4:
         if ((active0 & 0x889000L) != 0L)
            return 38;
         if ((active0 & 0x1300000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
            return 38;
         }
         return -1;
      case 5:
         if ((active0 & 0x100000L) != 0L)
            return 38;
         if ((active0 & 0x1200000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 5;
            return 38;
         }
         return -1;
      case 6:
         if ((active0 & 0x1200000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 6;
            return 38;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_1(0x1900000000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_1(0x2000000L, 0x0L);
      case 37:
         return jjMoveStringLiteralDfa1_1(0x200000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_1(0x400000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 26);
      case 41:
         return jjStopAtPos(0, 27);
      case 42:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_1(0x80000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_1(0x20000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 34);
      case 45:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_1(0x40000000400000L, 0x0L);
      case 46:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_1(0x1000000000L, 0x100L);
      case 47:
         return jjMoveStringLiteralDfa1_1(0x100000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 33);
      case 59:
         return jjStopAtPos(0, 32);
      case 61:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_1(0x680000000000L, 0x0L);
      case 63:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_1(0x4000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200L);
      case 91:
         return jjStopAtPos(0, 30);
      case 93:
         return jjStopAtPos(0, 31);
      case 94:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_1(0x1000000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x800000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x1000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x8400L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x280800L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x200L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x22000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x100000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x10000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x40000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x4000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 28);
      case 124:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_1(0x800000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 29);
      case 126:
         return jjStopAtPos(0, 71);
      default :
         return jjMoveNfa_1(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 46:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000L, active1, 0L);
      case 58:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 61:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 94:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x84000L, active1, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x102000L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(1, 9, 38);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000800L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x840000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x220000L, active1, 0L);
      case 126:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 36);
         break;
      case 78:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(2, 73, 38);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0xa0000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x1200000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000L, active1, 0L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(2, 11, 38);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(2, 14, 38);
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x400L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000L, active1, 0L);
      case 119:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(2, 13, 38);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x2800000L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x200000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(3, 10, 38);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(3, 16, 38);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(3, 18, 38);
         break;
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(3, 17, 38);
         return jjMoveStringLiteralDfa4_1(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x1008000L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(4, 12, 38);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(4, 19, 38);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000L);
      case 107:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(4, 23, 38);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000L);
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(4, 15, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x2000000L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(5, 20, 38);
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(7, 24, 38);
         break;
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(7, 21, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 76;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 67:
               case 38:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(38);
                  break;
               case 17:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(38);
                  break;
               case 55:
                  if (curChar == 47)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddStates(48, 50);
                  }
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(38);
                  }
                  else if (curChar == 47)
                     jjAddStates(51, 52);
                  else if (curChar == 39)
                     jjCheckNAddStates(53, 55);
                  else if (curChar == 34)
                     jjCheckNAddStates(56, 58);
                  else if (curChar == 33)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 47)
                  {
                     if (kind > 65)
                        kind = 65;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 0:
                  if (curChar != 35)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(59, 61);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(59, 61);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 38 && kind > 39)
                     kind = 39;
                  break;
               case 7:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 15:
                  if (curChar == 61 && kind > 41)
                     kind = 41;
                  break;
               case 16:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if (curChar == 61 && kind > 42)
                     kind = 42;
                  break;
               case 20:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 62 && kind > 49)
                     kind = 49;
                  break;
               case 22:
                  if (curChar == 61 && kind > 50)
                     kind = 50;
                  break;
               case 23:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 60 && kind > 51)
                     kind = 51;
                  break;
               case 25:
                  if (curChar == 61 && kind > 52)
                     kind = 52;
                  break;
               case 26:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 47 && kind > 65)
                     kind = 65;
                  break;
               case 31:
                  if (curChar == 37 && kind > 66)
                     kind = 66;
                  break;
               case 35:
                  if (curChar == 33 && kind > 67)
                     kind = 67;
                  break;
               case 37:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 34)
                     jjCheckNAddStates(56, 58);
                  break;
               case 40:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 42:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 43:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               case 44:
                  if (curChar == 39)
                     jjCheckNAddStates(53, 55);
                  break;
               case 45:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 47:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 48:
                  if (curChar == 39 && kind > 82)
                     kind = 82;
                  break;
               case 50:
                  jjCheckNAddStates(62, 64);
                  break;
               case 52:
                  if ((0xfffffffffffffffeL & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  break;
               case 54:
                  if (curChar == 47)
                     jjAddStates(51, 52);
                  break;
               case 56:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar == 42)
                     jjCheckNAddStates(65, 67);
                  break;
               case 58:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(59, 57);
                  break;
               case 59:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(59, 57);
                  break;
               case 60:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 61:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(48, 50);
                  break;
               case 62:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(48, 50);
                  break;
               case 63:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 64:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 65:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 67:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(38);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 68;
                  else if (curChar == 101)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 17:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(38);
                  }
                  if (curChar == 113)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  break;
               case 5:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(38);
                  }
                  else if (curChar == 96)
                     jjCheckNAddStates(62, 64);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if (curChar == 108)
                     jjAddStates(68, 69);
                  else if (curChar == 103)
                     jjAddStates(70, 71);
                  else if (curChar == 110)
                     jjAddStates(72, 73);
                  else if (curChar == 64)
                     jjCheckNAdd(37);
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 1:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(59, 61);
                  break;
               case 8:
                  if (curChar == 100 && kind > 39)
                     kind = 39;
                  break;
               case 9:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 124 && kind > 40)
                     kind = 40;
                  break;
               case 12:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 114 && kind > 40)
                     kind = 40;
                  break;
               case 14:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 18:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 28:
                  if (curChar == 118 && kind > 65)
                     kind = 65;
                  break;
               case 29:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 100 && kind > 66)
                     kind = 66;
                  break;
               case 33:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if (curChar == 64)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(38);
                  break;
               case 40:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 41:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  jjCheckNAddStates(56, 58);
                  break;
               case 45:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 46:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  jjCheckNAddStates(53, 55);
                  break;
               case 49:
                  if (curChar == 96)
                     jjCheckNAddStates(62, 64);
                  break;
               case 50:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  break;
               case 51:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  jjCheckNAddStates(62, 64);
                  break;
               case 53:
                  if (curChar == 96 && kind > 83)
                     kind = 83;
                  break;
               case 56:
                  jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
               case 59:
                  jjCheckNAddTwoStates(59, 57);
                  break;
               case 62:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(48, 50);
                  break;
               case 66:
                  if (curChar == 110)
                     jjAddStates(72, 73);
                  break;
               case 68:
                  if (curChar == 116 && kind > 67)
                     kind = 67;
                  break;
               case 69:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 103)
                     jjAddStates(70, 71);
                  break;
               case 71:
                  if (curChar == 116 && kind > 49)
                     kind = 49;
                  break;
               case 72:
                  if (curChar == 101 && kind > 50)
                     kind = 50;
                  break;
               case 73:
                  if (curChar == 108)
                     jjAddStates(68, 69);
                  break;
               case 74:
                  if (curChar == 116 && kind > 51)
                     kind = 51;
                  break;
               case 75:
                  if (curChar == 101 && kind > 52)
                     kind = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(59, 61);
                  break;
               case 40:
               case 42:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(56, 58);
                  break;
               case 45:
               case 47:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(53, 55);
                  break;
               case 50:
               case 52:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(62, 64);
                  break;
               case 56:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
               case 59:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(59, 57);
                  break;
               case 62:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(48, 50);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 76 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000000L) != 0L)
            return 72;
         if ((active0 & 0x22000L) != 0L)
         {
            jjmatchedKind = 76;
            return 93;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 81;
         }
         if ((active0 & 0x1900000000000L) != 0L)
         {
            jjmatchedKind = 67;
            return 13;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x10L) != 0L)
            return 0;
         if ((active0 & 0x2000680000000000L) != 0L)
            return 9;
         if ((active0 & 0x1bd5a00L) != 0L || (active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 76;
            return 33;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 66;
            return -1;
         }
         if ((active0 & 0x8400L) != 0L)
         {
            jjmatchedKind = 76;
            return 11;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x20L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0x200L) != 0L)
            return 33;
         if ((active0 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1bfdc00L) != 0L || (active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 1;
            }
            return 33;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 1;
            }
            return 33;
         }
         return -1;
      case 2:
         if ((active0 & 0x6800L) != 0L || (active1 & 0x200L) != 0L)
            return 33;
         if ((active0 & 0x1bf9400L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 2;
            return 33;
         }
         return -1;
      case 3:
         if ((active0 & 0x1b89000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
            return 33;
         }
         if ((active0 & 0x70400L) != 0L)
            return 33;
         return -1;
      case 4:
         if ((active0 & 0x889000L) != 0L)
            return 33;
         if ((active0 & 0x1300000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
            return 33;
         }
         return -1;
      case 5:
         if ((active0 & 0x100000L) != 0L)
            return 33;
         if ((active0 & 0x1200000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
            return 33;
         }
         return -1;
      case 6:
         if ((active0 & 0x1200000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 6;
            return 33;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x1900000000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 26);
      case 41:
         return jjStopAtPos(0, 27);
      case 42:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 34);
      case 45:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x40000000400000L, 0x0L);
      case 46:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x100L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 33);
      case 59:
         return jjStopAtPos(0, 32);
      case 61:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x680000000000L, 0x0L);
      case 63:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 91:
         return jjStopAtPos(0, 30);
      case 93:
         return jjStopAtPos(0, 31);
      case 94:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8400L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x280800L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x22000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 28);
      case 124:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 29);
      case 126:
         return jjStopAtPos(0, 71);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 46:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 58:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 61:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 94:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000L, active1, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x102000L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 33);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000800L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x840000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x220000L, active1, 0L);
      case 126:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 36);
         break;
      case 78:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 33);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 33);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L);
      case 119:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 33);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2800000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 33);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 33);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 33);
         break;
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1008000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 33);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 33);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 107:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 33);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 33);
         break;
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 102;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 81:
                  if (curChar == 47)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddStates(74, 76);
                  }
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                     jjCheckNAdd(35);
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAddStates(77, 79);
                  }
                  break;
               case 93:
               case 33:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(33);
                  break;
               case 11:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(33);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(80, 85);
                  else if (curChar == 47)
                     jjAddStates(86, 87);
                  else if (curChar == 35)
                     jjAddStates(88, 89);
                  else if (curChar == 39)
                     jjCheckNAddStates(53, 55);
                  else if (curChar == 34)
                     jjCheckNAddStates(56, 58);
                  else if (curChar == 36)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(33);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAddStates(90, 92);
                  }
                  else if (curChar == 35)
                     jjCheckNAdd(35);
                  else if (curChar == 47)
                  {
                     if (kind > 65)
                        kind = 65;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 0:
                  if (curChar == 38 && kind > 39)
                     kind = 39;
                  break;
               case 9:
                  if (curChar == 61 && kind > 41)
                     kind = 41;
                  break;
               case 10:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if (curChar == 61 && kind > 42)
                     kind = 42;
                  break;
               case 14:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 62 && kind > 49)
                     kind = 49;
                  break;
               case 16:
                  if (curChar == 61 && kind > 50)
                     kind = 50;
                  break;
               case 17:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 60 && kind > 51)
                     kind = 51;
                  break;
               case 19:
                  if (curChar == 61 && kind > 52)
                     kind = 52;
                  break;
               case 20:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 47 && kind > 65)
                     kind = 65;
                  break;
               case 25:
                  if (curChar == 37 && kind > 66)
                     kind = 66;
                  break;
               case 29:
                  if (curChar == 33 && kind > 67)
                     kind = 67;
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if (curChar != 36)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if (curChar == 35)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if (curChar == 34)
                     jjCheckNAddStates(56, 58);
                  break;
               case 40:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 42:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 43:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               case 44:
                  if (curChar == 39)
                     jjCheckNAddStates(53, 55);
                  break;
               case 45:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 47:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 48:
                  if (curChar == 39 && kind > 82)
                     kind = 82;
                  break;
               case 50:
                  jjCheckNAddStates(62, 64);
                  break;
               case 52:
                  if ((0xfffffffffffffffeL & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(80, 85);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 46)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddStates(93, 95);
                  break;
               case 59:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(60, 61);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(96, 99);
                  break;
               case 63:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(64, 61);
                  break;
               case 65:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 61);
                  break;
               case 67:
                  if (curChar != 48)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(90, 92);
                  break;
               case 68:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(68, 38);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(70, 38);
                  break;
               case 71:
                  if (curChar == 35)
                     jjAddStates(88, 89);
                  break;
               case 73:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(77, 79);
                  break;
               case 74:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 75:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 76:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 80:
                  if (curChar == 47)
                     jjAddStates(86, 87);
                  break;
               case 82:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if (curChar == 42)
                     jjCheckNAddStates(100, 102);
                  break;
               case 84:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(85, 83);
                  break;
               case 85:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(85, 83);
                  break;
               case 86:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 87:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(74, 76);
                  break;
               case 88:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(74, 76);
                  break;
               case 89:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 90:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 91:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 93:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(33);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 94;
                  else if (curChar == 101)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 11:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(33);
                  }
                  if (curChar == 113)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  break;
               case 1:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(33);
                  }
                  else if (curChar == 96)
                     jjCheckNAddStates(62, 64);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 108)
                     jjAddStates(103, 104);
                  else if (curChar == 103)
                     jjAddStates(105, 106);
                  else if (curChar == 110)
                     jjAddStates(107, 108);
                  else if (curChar == 64)
                     jjCheckNAdd(31);
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 2:
                  if (curChar == 100 && kind > 39)
                     kind = 39;
                  break;
               case 3:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 124 && kind > 40)
                     kind = 40;
                  break;
               case 6:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 114 && kind > 40)
                     kind = 40;
                  break;
               case 8:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 22:
                  if (curChar == 118 && kind > 65)
                     kind = 65;
                  break;
               case 23:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 100 && kind > 66)
                     kind = 66;
                  break;
               case 27:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if (curChar == 64)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(33);
                  break;
               case 38:
                  if ((0x110000001100L & l) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 40:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 41:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  jjCheckNAddStates(56, 58);
                  break;
               case 45:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 46:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  jjCheckNAddStates(53, 55);
                  break;
               case 49:
                  if (curChar == 96)
                     jjCheckNAddStates(62, 64);
                  break;
               case 50:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  break;
               case 51:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  jjCheckNAddStates(62, 64);
                  break;
               case 53:
                  if (curChar == 96 && kind > 83)
                     kind = 83;
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(109, 110);
                  break;
               case 61:
                  if ((0x5400000054L & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 64:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(111, 112);
                  break;
               case 69:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(70, 38);
                  break;
               case 73:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(77, 79);
                  break;
               case 77:
                  if (curChar == 78 && kind > 81)
                     kind = 81;
                  break;
               case 78:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 82:
                  jjCheckNAddTwoStates(82, 83);
                  break;
               case 84:
               case 85:
                  jjCheckNAddTwoStates(85, 83);
                  break;
               case 88:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(74, 76);
                  break;
               case 92:
                  if (curChar == 110)
                     jjAddStates(107, 108);
                  break;
               case 94:
                  if (curChar == 116 && kind > 67)
                     kind = 67;
                  break;
               case 95:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 103)
                     jjAddStates(105, 106);
                  break;
               case 97:
                  if (curChar == 116 && kind > 49)
                     kind = 49;
                  break;
               case 98:
                  if (curChar == 101 && kind > 50)
                     kind = 50;
                  break;
               case 99:
                  if (curChar == 108)
                     jjAddStates(103, 104);
                  break;
               case 100:
                  if (curChar == 116 && kind > 51)
                     kind = 51;
                  break;
               case 101:
                  if (curChar == 101 && kind > 52)
                     kind = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 40:
               case 42:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(56, 58);
                  break;
               case 45:
               case 47:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(53, 55);
                  break;
               case 50:
               case 52:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(62, 64);
                  break;
               case 73:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(77, 79);
                  break;
               case 82:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 84:
               case 85:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(85, 83);
                  break;
               case 88:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(74, 76);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 102 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   71, 72, 74, 53, 54, 60, 61, 62, 59, 79, 85, 70, 77, 43, 44, 46, 
   38, 39, 41, 66, 67, 36, 86, 87, 89, 48, 49, 51, 55, 56, 59, 60, 
   61, 62, 59, 81, 82, 84, 98, 99, 95, 96, 91, 93, 57, 58, 63, 64, 
   62, 63, 65, 55, 61, 45, 46, 48, 40, 41, 43, 1, 2, 4, 50, 51, 
   53, 57, 58, 60, 74, 75, 71, 72, 67, 69, 88, 89, 91, 73, 74, 76, 
   55, 56, 62, 63, 64, 61, 81, 87, 72, 79, 68, 69, 38, 57, 58, 61, 
   62, 63, 64, 61, 83, 84, 86, 100, 101, 97, 98, 93, 95, 59, 60, 65, 
   66, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\151\146", 
"\145\154\163\145", "\146\157\162", "\167\150\151\154\145", "\156\145\167", "\166\141\162", 
"\145\155\160\164\171", "\163\151\172\145", "\156\165\154\154", "\164\162\165\145", 
"\146\141\154\163\145", "\162\145\164\165\162\156", "\146\165\156\143\164\151\157\156", "\55\76", 
"\142\162\145\141\153", "\143\157\156\164\151\156\165\145", "\43\160\162\141\147\155\141", "\50", 
"\51", "\173", "\175", "\133", "\135", "\73", "\72", "\54", "\56", "\56\56\56", 
"\77", "\77\72", null, null, null, null, "\75\176", "\41\176", "\75\136", "\75\44", 
"\41\136", "\41\44", null, null, null, null, "\53\75", "\55\75", "\52\75", "\57\75", 
"\45\75", "\46\75", "\174\75", "\136\75", "\75", "\53", "\55", "\52", null, null, null, 
"\46", "\174", "\136", "\176", "\56\56", "\116\141\116", null, null, null, null, null, 
null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "REGISTERS",
   "DOT_ID",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xf9fffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[102];
private final int[] jjstateSet = new int[204];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 102; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 2;
int defaultLexState = 2;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                            popDot();
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                          popDot();
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                      pushDot();
         break;
      case 75 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                         popDot();
         break;
      case 82 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      popDot();
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
